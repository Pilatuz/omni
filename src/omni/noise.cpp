//////////////////////////////////////////////////////////////////////////
//		This material is provided "as is", with absolutely no warranty
//	expressed or implied. Any use is at your own risk.
//
//		Permission to use or copy this software for any purpose is hereby
//	granted without fee, provided the above notices are retained on all
//	copies. Permission to modify the code and to distribute modified code
//	is granted, provided the above notices are retained, and a notice that
//	the code was modified is included with the above copyright notice.
//
//		http://omni.sourceforge.net
//////////////////////////////////////////////////////////////////////////
/** @file
	@brief Implementation of the omni::dsp::GaussNoiseT class.

@author Sergey Polichnoy
*/
#include <omni/noise.h>
#include <omni/rand.h>

#include <math.h>

namespace omni
{
	namespace dsp
	{

//////////////////////////////////////////////////////////////////////////
/** @class GaussNoiseT
	@brief The White Noise Generator.

		To generate samples of the White Gauss Noise (WGN) you can use
	static method get_sample() or operator() of the GaussNoiseT objects.

		GaussNoiseT object contains noise standard deviation (stdev()).
	To change standard deviation of the GaussNoiseT object use following
	example:

@code
	GaussNoise n;         // stdev()==1.0
	n = GaussNoise(2.0);  // stdev()==2.0
	n = GaussNoise(3.0);  // stdev()==3.0
@endcode

		Note that the GaussNoiseT use uniform distributed double values
	generated by omni::rand::runif() function. So, the GaussNoiseT implicit
	depend of the state of the global uniform generator.

		Implementation of the GaussNoiseT based on the Gauss_Noise_Generator
	class created by Andrey Savinkov (2000).
*/


//////////////////////////////////////////////////////////////////////////
/** @typedef std::complex<T> GaussNoiseT::sample_type
	@brief Type of generated samples.
*/


//////////////////////////////////////////////////////////////////////////
/// @brief Default constructor.
/**
		This default constructor create the GaussNoiseT object with unit
	standard deviation (stdev()==1).
*/
template<typename T>
	GaussNoiseT<T>::GaussNoiseT()
		: m_stdev(1)
{}


//////////////////////////////////////////////////////////////////////////
/// @brief Extended constructor.
/**
		This constructor create the GaussNoiseT object with
	standard deviation @a noise_stdev.

		To change standard deviation of the created GaussNoiseT object
	assign new GaussNoiseT object to the existing:

@code
	GaussNoise n; // stdev()==1.0
	// ...
	n = GaussNoise(2.0) // stdev()==2.0
@endcode

@param noise_stdev Noise standard deviation.
*/
template<typename T>
	GaussNoiseT<T>::GaussNoiseT(const T& noise_stdev)
		: m_stdev(noise_stdev)
{}


//////////////////////////////////////////////////////////////////////////
/// @brief Get WGN sample.
/**
		Method return the new WGN sample with standard deviation stdev().

@return New WGN sample.
*/
template<typename T>
	typename GaussNoiseT<T>::sample_type GaussNoiseT<T>::operator()() const
{
	return get_sample(m_stdev);
}


//////////////////////////////////////////////////////////////////////////
/// @brief Get standard deviation.
/**
		Method return the current standard deviation of the WGN generator.

@return Standard deviation of the WGN generator.
*/
template<typename T> inline
	const T& GaussNoiseT<T>::stdev() const
{
	return m_stdev;
}


//////////////////////////////////////////////////////////////////////////
/// @brief Get WGN sample.
/**
		Static method return the new WGN sample with specific
	standard deviation @a noise_stdev.

@param noise_stdev Standard deviation of the WGN sample.
@return New WGN sample.
*/
template<typename T>
	typename GaussNoiseT<T>::sample_type GaussNoiseT<T>::get_sample(const T &noise_stdev)
{
	double re, im, nrm;

	do {
		re = rand::runif(-1.0, +1.0);
		im = rand::runif(-1.0, +1.0);
		nrm = re*re + im*im;
	} while (0.0==nrm || 1.0<=nrm);

	nrm = noise_stdev * sqrt(-log(nrm) / nrm);
	return sample_type(T(re*nrm), T(im*nrm));
}


//////////////////////////////////////////////////////////////////////////
// explicit instantiations
// template class GaussNoiseT<long double>;
template class GaussNoiseT<double>;
template class GaussNoiseT<float>;

	} // dsp namespace
} // omni namespace
