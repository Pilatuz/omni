//////////////////////////////////////////////////////////////////////////
//		This material is provided "as is", with absolutely no warranty
//	expressed or implied. Any use is at your own risk.
//
//		Permission to use or copy this software for any purpose is hereby
//	granted without fee, provided the above notices are retained on all
//	copies. Permission to modify the code and to distribute modified code
//	is granted, provided the above notices are retained, and a notice that
//	the code was modified is included with the above copyright notice.
//
//		http://omni.sourceforge.net
//////////////////////////////////////////////////////////////////////////
#include <omni/delay.h>
#include <complex>

namespace omni
{
	namespace dsp
	{

//////////////////////////////////////////////////////////////////////////
/** @class DelayLine

@section omni_DelayLine_overview Обзор

		Линия задержки представляет собой структуру данных, которая содержит
	некоторое количество элементов, определяемое размером линии задержки.
	Новый элемент, поступающий на вход, "сдвигает" уже имеющиеся элементы.
	При этом последний элемент "выталкивается" из линии задержки. Таким
	образом, новые элементы поступающие на вход линии задержки, оказываются
	на ее выходе через несколько тактов работы, равное размеру.

@image html DelayLine.png Логическая схема линии задержки

		Например, следующий код демонстрирует работу линии задержки. После
	добавления нового элемента на экран выводится новое содержимое линии
	задержки и "вытолкнутый" элемент.

@code
DelayLine<int> d(5); // размер - 5 элементов
for (int k = 0; k < 10; ++k)
{
	int x = k+1;  // новый элемент
	int y = d(x); // добавить новый элемент, вернет "вытолкнутый" элемент

	std::cout << "input: " << x << ", ";
	std::cout << "content: [ ";
	std::copy(d.begin(), d.end(),
		std::ostream_iterator<int>(std::cout, " "));
	std::cout << "], output: " << y << "\n";
}
@endcode

		После запуска программы на экране появится:

@code
input: 1, content: [ 1 0 0 0 0 ], output: 0
input: 2, content: [ 2 1 0 0 0 ], output: 0
input: 3, content: [ 3 2 1 0 0 ], output: 0
input: 4, content: [ 4 3 2 1 0 ], output: 0
input: 5, content: [ 5 4 3 2 1 ], output: 0
input: 6, content: [ 6 5 4 3 2 ], output: 1
input: 7, content: [ 7 6 5 4 3 ], output: 2
input: 8, content: [ 8 7 6 5 4 ], output: 3
input: 9, content: [ 9 8 7 6 5 ], output: 4
@endcode

		Параметр шаблона @a T определяет тип элементов линии задержки.

@section omni_DelayLine_access Доступ к элементам

		Класс содержит методы доступа к содержимому линии задержки по индексу
	at() и через квадратные скобки. Также можно скопировать все содержимое
	во внешний буфер с помощью метода copy(), который заведомо быстрее,
	чем последовательное обращение по индексу.

		Также класс содержит несколько вспомогательных методов для доступа
	к первому, последнему, а также, "вытолкнотому" элементам.
	Соответственно: front(), back(), out().

		Поддерживаются итераторы с произвольным доступом и соответственно
	методы begin() и end().


@section omni_DelayLine_example Примеры использования

		Следующие фрагменты кода демонстрируют примеры использования
	линии задержки.


@subsection omni_DelayLine_example1 Медианный фильтр
		Медианный фильтр - скользящее окно, используется в качестве защиты
	от случайных выбросов сигнала. Содержимое скользящего окна
	упорядочивается и возвращается элемент из середины.

@code
template<typename T>
	class MedianFilter {
	public:
		// создать фильтр размера N
		MedianFilter(size_t N, const T &x)
			: m_delay(N, x), m_buffer(N) {}

		// фильтровать отсчет
		T operator()(const T &x)
		{
			m_delay(x); // добавляем в линию задержки

			// копируем во временный буфер
			m_delay.copy(m_buffer.begin());

			// упорядочиваем
			std::sort(m_buffer.begin(),
				m_buffer.end());

			// возвращаем элемент из середины
			return m_buffer[m_buffer.size()/2];
		}

	private:
		DelayLine<T> m_delay;
		std::vector<T> m_buffer;
	};
@endcode


@subsection omni_DelayLine_example2 Многолучевый канал
		Выходом многолучевого канала является взвешенная сумма задержанного
	входного сигнала. Первый луч без задержки, второй задержан на 5 отсчетов,
	а третий - на 9.

@code
double channel_run(double x)
{
	m_delay(x);

	return 1.0*m_delay[0]
		+ 0.5*m_delay[5]
		+ 0.1*m_delay[9];
}
@endcode

@author Сергей Поличной
*/


//////////////////////////////////////////////////////////////////////////
/** @fn DelayLine<T>::DelayLine()

		Конструктор создает линию задержки нулевого размера. Элементы
	попадающие на вход линии задержки, сразу же оказываются на ее выходе.
	Эквивалентный код работы:

@code
const_reference operator()(const_reference x)
{
	return x;
}
@endcode
*/

//////////////////////////////////////////////////////////////////////////
/** @fn DelayLine<T>::DelayLine(size_type N)

		Конструктор создает линию задержки размера @a N. Элементы попадающие
	на вход линии задержки, оказываются на ее выходе через @a N тактов.
	Линия задержки инициализируется значениями по умолчанию.

@param N Размер линии задержки
*/

//////////////////////////////////////////////////////////////////////////
/** @fn DelayLine<T>::DelayLine(size_type N, const_reference x)

		Конструктор создает линию задержки размера @a N. Элементы попадающие
	на вход линии задержки, оказываются на ее выходе через @a N тактов.
	Линия задержки инициализируется значениями @a x.

@param N Размер линии задержки
@param x Значение, которым будет инициализирована линия задержки
*/

//////////////////////////////////////////////////////////////////////////
/** @fn size_type DelayLine<T>::size() const

		Метод возвращает текущий размер линии задержки.

@return Текущий размер линии задержки
*/

//////////////////////////////////////////////////////////////////////////
/** @fn void DelayLine<T>::resize(size_type N)

		Метод изменяет размер линии задержки на @a N.
	Линия задержки инициализируется значениями по умолчанию.

@warning Содержимое линии задержки обнуляется!
@param N Новый размер линии задержки
*/

//////////////////////////////////////////////////////////////////////////
/** @fn void DelayLine<T>::resize(size_type N, const_reference x)

		Метод изменяет размер линии задержки на @a N. Линия задержки
	заполняется значениями @a x.

@param N Новый размер линии задержки
@param x Значение, которым будет инициализирована ВСЯ линия задержки
*/

//////////////////////////////////////////////////////////////////////////
/** @fn void DelayLine<T>::reset()

		Метод обнуляет содержимое линии задержки, не меняя ее размер.
	Линия задержки инициализируется значениями по умолчанию.
*/

//////////////////////////////////////////////////////////////////////////
/** @fn void DelayLine<T>::reset(const_reference x)

	Метод заполняет линию задержки значениями @a x, не меняя ее размер.

@param x Значение, которым будет инициализирована ВСЯ линия задержки
*/

//////////////////////////////////////////////////////////////////////////
/** @fn const_reference DelayLine<T>::operator()(const_reference x)

		Метод помещяет элемент @a x в линию задержки
	и возвращает "вытолкнутый" элемент. Эквивалентный код работы:

@code
const_reference operator()(const_reference x)
{
	m_buf.push_front(x);
	m_out = m_buf.back();
	m_buf.pop_back();
	return m_out;
}
@endcode

		Где @a m_buf - буфер элементов (например @a deque),
	@a m_out - "вытолкнутый" элемент.

@param x Элемент, помещаемый в линию задержки
@return Элемент, "вытолкнутый" из линии задержки
*/

//////////////////////////////////////////////////////////////////////////
/** @fn const_reference DelayLine<T>::at(size_type i) const

		Метод возвращает элемент, находящийся в @a i-ой позиции линии задержки.
	В режиме отладки индекс @a i проверяется. Нулевой элемент соответствует
	последнему добавленному элементу (самый молодой).

@param i Индекс элемента в линии задержки
@return Константная ссылка на элемент
*/

//////////////////////////////////////////////////////////////////////////
/** @fn reference DelayLine<T>::at(size_type i)

		Метод возвращает элемент, находящийся в @a i-ой позиции линии задержки.
	В режиме отладки индекс @a i проверяется. Нулевой элемент соответствует
	последнему добавленному элементу (самый молодой).

		С помощью данного метода можно изменять содержимое линии задержки!

@param i Индекс элемента в линии задержки
@return Ссылка на элемент
*/

//////////////////////////////////////////////////////////////////////////
/** @fn const_reference DelayLine<T>::operator[](size_type i) const

		Метод возвращает элемент, находящийся в @a i-ой позиции линии задержки.
	В режиме отладки индекс @a i проверяется. Нулевой элемент соответствует
	последнему добавленному элементу (самый молодой). Метод является
	псевдонимом для at().

@param i Индекс элемента в линии задержки
@return Константная ссылка на элемент
*/

//////////////////////////////////////////////////////////////////////////
/** @fn reference DelayLine<T>::operator[](size_type i)

		Метод возвращает элемент, находящийся в @a i-ой позиции линии задержки.
	В режиме отладки индекс @a i проверяется. Нулевой элемент соответствует
	последнему добавленному элементу (самый молодой). Метод является
	псевдонимом для at().

		С помощью данного метода можно изменять содержимое линии задержки!

@param i Индекс элемента в линии задержки
@return Ссылка на элемент
*/

//////////////////////////////////////////////////////////////////////////
/** @fn const_reference DelayLine<T>::out() const

		Метод возвращает элемент, "вытолкнутый" из линии задержки, т.е. то
	что вернул последний вызов operator()().

@return Константная ссылка на "вытолкнутый" элемент
*/

//////////////////////////////////////////////////////////////////////////
/** @fn reference DelayLine<T>::out()

		Метод возвращает элемент, "вытолкнутый" из линии задержки, т.е. то
	что вернул последний вызов operator()().

		С помощью данного метода можно изменять содержимое линии задержки!

@return Ссылка на "вытолкнутый" элемент
*/

//////////////////////////////////////////////////////////////////////////
/** @fn const_reference DelayLine<T>::front() const

		Метод возвращает первый элемент линии задержки (самый молодой).

@return Константная ссылка на первый элемент
*/

//////////////////////////////////////////////////////////////////////////
/** @fn reference DelayLine<T>::front()

		Метод возвращает первый элемент линии задержки (самый молодой).

		С помощью данного метода можно изменять содержимое линии задержки!

@return Ссылка на первый элемент
*/

//////////////////////////////////////////////////////////////////////////
/** @fn const_reference DelayLine<T>::back() const

		Метод возвращает последний элемент линии задержки (самый старый).

@return Константная ссылка на последний элемент
*/

//////////////////////////////////////////////////////////////////////////
/** @fn reference DelayLine<T>::back()

		Метод возвращает последний элемент линии задержки (самый старый).

		С помощью данного метода можно изменять содержимое линии задержки!

@return Ссылка на последний элемент
*/

//////////////////////////////////////////////////////////////////////////
/** @fn void DelayLine<T>::copy(Out first) const

		Метод копирует содержимое линии задержки в временный буфер @a first.
	Размер буфера должен быть достаточным, чтобы вместить все элементы!

@param first Итератор на начало временного буфера
*/

//////////////////////////////////////////////////////////////////////////
/** @fn const_iterator DelayLine<T>::begin() const

		Метод возвращает итератор, указывающий на начало содержимого
	линии задержки.

@return Константный итератор на начало содержимого
*/

//////////////////////////////////////////////////////////////////////////
/** @fn iterator DelayLine<T>::begin()

		Метод возвращает итератор, указывающий на начало содержимого
	линии задержки.

		С помощью данного метода можно изменять содержимое линии задержки!

@return Итератор на начало содержимого
*/

//////////////////////////////////////////////////////////////////////////
/** @fn const_iterator DelayLine<T>::end() const

		Метод возвращает итератор, указывающий за окончание содержимого
	линии задержки.

@return Константный итератор за окончание содержимого
*/

//////////////////////////////////////////////////////////////////////////
/** @fn iterator DelayLine<T>::end()

		Метод возвращает итератор, указывающий за окончание содержимого
	линии задержки.

		С помощью данного метода можно изменять содержимое линии задержки!

@return Итератор за окончание содержимого
*/

	} // dsp namespace
} // omni namespace


//////////////////////////////////////////////////////////////////////////
/** @file
@brief Линия задержки

		Файл пока содержит только документацию.

@author Сергей Поличной
*/
